#[link(name = "rtlsdr", vers = "0.1", author = "Ian Daniher")];

extern mod extra;

use extra::time;
use extra::complex;

mod kissfft;

mod video;
mod pa;

fn main() {
	let (p1, c1) = kissfft::buildFFTBlock(256, true);
	let (p2, c2) = video::spawnVectorVisualSink();
	let pa = pa::buildPASourceBlock();
	let mut i = 0;
	let now = time::precise_time_ns();
	let mut v: ~[u64] = ~[];
	for 100.times {
		let data: ~[f32] = pa.recv();
		v.push((time::precise_time_ns() - now)/1000);
		let samples: ~[complex::Complex32] = data.iter().transform(|&x| {complex::Cmplx {re: x, im: 0.0}}).collect();
		v.push((time::precise_time_ns() - now)/1000);
		c1.send(samples);
		v.push((time::precise_time_ns() - now)/1000);
		let fftd = p1.recv();
		v.push((time::precise_time_ns() - now)/1000);
		let mag: ~[f32] = fftd.iter().transform(|&x| {let (a,b) = x.to_polar(); a}).collect();
		v.push((time::precise_time_ns() - now)/1000);
		c2.send(mag);
		v.push((time::precise_time_ns() - now)/1000);
	}
	let vf32: ~[f32] = v.iter().transform( |&x| (x as f32)/1000.0).collect();	
	println(fmt!("%?", vf32));
	c2.send(vf32);
}
